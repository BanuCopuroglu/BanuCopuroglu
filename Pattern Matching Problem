def PatternMatching(Pattern, Genome):
    positions = [ ] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if Genome[i:i+len(Pattern)] == Pattern:
           positions.append(i)
    return positions
Genome = "GATATATGCATATACTT"
Pattern = "ATAT"
print(PatternMatching(Pattern, Genome))

#Goal:

#Initially positions is a blank list. Our goal is to read through the sequence(Genome) for 
#the length of the Pattern and if the read matches the Pattern, it has to return the starting position of the read (i) 
#to the empty list(Positions[ ])

#Step by Step explanation : 

#Genome = GATATATGCATATACTT

#Positions = 012345678910111213141516 ---> These are the values 'i' will take

#Pattern = ATAT

#len(Pattern) = 4

#len(Genome)= 17

#So, first we define a function which does what is required and returns a result

def PatternMatching(Pattern, Genome):

#Next is having an empty list which will display the positions where we are getting a match to the Pattern. 
#Why list? And not any string or integer variable? Because of the way the output looks. 1 3 9. 
#Any other variable type may end up adding these numbers. Hence we start off with an empty list.

positions = [ ] # output variable

#Next is to read through the entire Genome in a specific reading frame which is equal to the length of the pattern.

for i in range(len(Genome)-len(Pattern)+1):

### This tells us that i starts from 0 and goes upto 17-4 +1 = 14. 
### We know that we always increment the range by 1 since it always goes 
### upto 1 unit less. In this case, i takes values from 0 to 13. Check the Genome with positions. 
### You will see that the last bunch of bases which are 4 units long start at position 13.

# The next step is to read through the bases in the genome  in a specific reading frame which is equal to 
# the length of the pattern and compare the bases in the genome to the given Pattern.

        if Genome[i:i+len(Pattern)] == Pattern:
              positions.append(i)
   return positions

# So here, starting from position i=0, this will be something like if Genome[0 : 4] == Pattern: 

[0:4] means characters at positions 0,1,2,3 which is GATA

Then it compares if GATA == ATAT

# If "True", positions[ ] has to be updated with the corresponding starting position (the value of i). 
# In this case, result of comparison is "False". 
# So positions[ ] is still blank and the function returns an empty list.

# Let's see what happens at the very next iteration. 
# Now i=1

         if Genome[i:i+len(Pattern)] == Pattern:
             positions.append(i)
    return positions

# So the program is going to check if the characters/bases at Genome[1:5] == Pattern

# [1:5] means characters at positions 1,2,3,4 which is ATAT

# Next it compares ATAT == ATAT. The result of comparison is "True"

# Now the list positions[ ] has to be updated with the starting position which is the value of i, 1 in this case.

# The function returns an updated list with one value [1]. 
# Note: return statement is aligned with the for loop and not the if statement. 
# This makes a lot of difference to the program.

# The program moves to next iteration. i = 2 and so on up to i=13.

# Final Output will be something like : 

# 1 3 9   (index numbers)


----------------------------------------------------------------------------------------------------------


def PatternMatching(Pattern, Genome):
    positions = [] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if Pattern == Genome[i:i+len(Pattern)]:
            positions.append(i)
   
    return positions
